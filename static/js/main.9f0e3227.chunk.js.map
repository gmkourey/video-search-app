{"version":3,"sources":["components/search_bar.js","components/video_detail.js","components/video_list_item.js","components/video_list.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","searchValue","event","this","setState","target","value","_this2","react_default","a","createElement","className","type","onChange","handleChange","val","onClick","props","onSearch","React","Component","VideoDetail","title","description","video","url","id","videoId","src","snippet","VideoListItem","imageUrl","thumbnails","default","selectedVideo","alt","VideoList","videoItems","videos","map","video_list_item","key","etag","App","videoSearch","term","YTSearch","searchTerm","preventDefault","newVideo","find","item","_this3","search_bar","video_detail","video_list","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4MAuBeA,6MApBXC,MAAQ,CACJC,YAAa,gFAGJC,GACTC,KAAKC,SAAS,CAACH,YAAaC,EAAMG,OAAOC,yCAGpC,IAAAC,EAAAJ,KACL,OACIK,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aAAaC,KAAK,OAAOC,SAAU,SAACX,GAAD,OAAWK,EAAKO,aAAaZ,IAAQa,IAAKZ,KAAKH,MAAMC,cACzGO,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASI,QAAS,SAACd,GAAD,OAAWK,EAAKU,MAAMC,SAAShB,EAAOK,EAAKP,MAAMC,eAAhF,mBAdQkB,IAAMC,WC8BfC,6MA5BXrB,MAAQ,CACJsB,MAAO,GACPC,YAAa,4EAIb,IAAIC,EAAQrB,KAAKc,MAAMO,MAEvB,GAAY,MAATA,EACC,OAAOhB,EAAAC,EAAAC,cAAA,qCAGX,IAAIe,EAAI,iCAAmCD,EAAME,GAAGC,QAEpD,OACInB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2CACXH,EAAAC,EAAAC,cAAA,UAAQY,MAAM,cAAcX,UAAU,yBAAyBiB,IAAKH,KAExEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,cAASc,EAAMK,QAAQP,QAC5Bd,EAAAC,EAAAC,cAAA,WAAMc,EAAMK,QAAQN,sBAvBVJ,IAAMC,WCiBjBU,EAjBO,SAACb,GACnB,IAAIO,EAAQP,EAAMO,MACdO,EAAWP,EAAMK,QAAQG,WAAWC,QAAQR,IAChD,OACIjB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkBK,QAAS,kBAAMC,EAAMiB,kBACjD1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAewB,IAAKlB,EAAMkB,IAAKP,IAAKG,KAEvDvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBa,EAAMK,QAAQP,WCUlDc,EAnBG,SAACnB,GACX,IAAMoB,EAAapB,EAAMqB,OAAOC,IAAI,SAAAf,GAChC,OACIhB,EAAAC,EAAAC,cAAC8B,EAAD,CACAC,IAAKjB,EAAMkB,KACXP,IAAKX,EAAMK,QAAQP,MACnBE,MAAOA,EACPU,cAAe,kBAAMjB,EAAMiB,cAAcV,EAAME,GAAGC,cAK1D,OACInB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBACT0B,qBCiCFM,6MAzCX3C,MAAQ,CACJsC,OAAO,GACPJ,cAAe,yFAGf/B,KAAKyC,YAAY,+CAGTC,GAAM,IAAAtC,EAAAJ,KACd2C,IAAS,CAACL,IAAI,0CAA2CI,KAAKA,GAAO,SAAAP,GACjE/B,EAAKH,SAAS,CACVkC,OAAQA,EACRJ,cAAcI,EAAO,wCAIxBpC,EAAO6C,GACZ7C,EAAM8C,iBACN7C,KAAKyC,YAAYG,yCAEPvB,GACV,IAAMyB,EAAW9C,KAAKH,MAAMsC,OAAOY,KAAK,SAACC,GAAD,OAAUA,EAAKzB,GAAGC,UAAYH,IACtErB,KAAKC,SAAS,CAAC8B,cAAce,qCAGxB,IAAAG,EAAAjD,KACT,OACAK,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC2C,EAAD,CAAWnC,SAAU,SAAChB,EAAO6C,GAAR,OAAuBK,EAAKlC,SAAShB,EAAO6C,MACjEvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAC4C,EAAD,CAAa9B,MAAOrB,KAAKH,MAAMkC,gBAC/B1B,EAAAC,EAAAC,cAAC6C,EAAD,CACIrB,cAAe,SAACA,GAAD,OAAmBkB,EAAKlB,cAAcA,IACrDI,OAAUnC,KAAKH,MAAMsC,kBAnCXnB,IAAMC,WCKJoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9f0e3227.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass SearchBar extends React.Component {\r\n    state = {\r\n        searchValue: \"\"\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({searchValue: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <form>\r\n                <input className=\"search-bar\" type=\"text\" onChange={(event) => this.handleChange(event)} val={this.state.searchValue}/>\r\n                <button type=\"submit\" onClick={(event) => this.props.onSearch(event, this.state.searchValue)}>Search</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from \"react\";\r\n\r\nclass VideoDetail extends React.Component {\r\n\r\n    state = {\r\n        title: \"\",\r\n        description: \"\"\r\n    }\r\n\r\n    render () {\r\n        let video = this.props.video;\r\n\r\n        if(video == null) {\r\n            return <div>Video is not available</div>\r\n        }\r\n\r\n        var url=\"https://www.youtube.com/embed/\" + video.id.videoId;\r\n\r\n        return (\r\n            <div className=\"col-md-8 video-detail\">\r\n                <div className=\"embed-responsive embed-responsive-16by9\">\r\n                    <iframe title=\"videoDetail\" className=\"embed-repsponsive-item\" src={url}/>\r\n                </div>\r\n                <div className=\"detail\">\r\n                <div><strong>{video.snippet.title}</strong></div>\r\n                <div>{video.snippet.description}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default VideoDetail;","import React from \"react\";\r\n\r\nconst VideoListItem = (props) => {\r\n    var video = props.video;\r\n    var imageUrl = video.snippet.thumbnails.default.url;\r\n    return (\r\n        <li className=\"list-group-item\" onClick={() => props.selectedVideo()}>\r\n            <div className=\"video-list media\">\r\n                <div className=\"media-left\">\r\n                    <img className=\"media-object\" alt={props.alt} src={imageUrl}/>\r\n                </div>\r\n                <div className=\"media-body\">\r\n                    <div className=\"mediaHeading\">{video.snippet.title}</div>\r\n                </div>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default VideoListItem;","import React from \"react\";\r\nimport VideoListItem from \"./video_list_item\";\r\n\r\nconst VideoList = (props) => {\r\n        const videoItems = props.videos.map(video => {\r\n            return(\r\n                <VideoListItem\r\n                key={video.etag}\r\n                alt={video.snippet.title}\r\n                video={video}\r\n                selectedVideo={() => props.selectedVideo(video.id.videoId)}\r\n                />\r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className=\"col-md-4 list-group\">\r\n                {videoItems}\r\n            </ul>\r\n        )\r\n\r\n}\r\nexport default VideoList;","//Create a new component. This component should produce some HTML\nimport React from \"react\";\nimport SearchBar from \"./components/search_bar\";\nimport VideoDetail from \"./components/video_detail\";\nimport VideoList from \"./components/video_list\";\nimport YTSearch from \"youtube-api-search\";\n\nclass App extends React.Component {\n\n    state = {\n        videos:[],\n        selectedVideo: null\n    }\n    componentDidMount() {\n        this.videoSearch(\"surfing\");\n    }\n\n    videoSearch(term) {\n        YTSearch({key:'AIzaSyC-zg-J0JYavdkcnuS3_gvHjt_aWWBMMbI', term:term}, videos => {\n            this.setState({\n                videos: videos,\n                selectedVideo:videos[0]\n            })\n        })\n    }\n    onSearch(event, searchTerm) {\n        event.preventDefault();\n        this.videoSearch(searchTerm);\n    }\n    selectedVideo(video) {\n        const newVideo = this.state.videos.find((item) => item.id.videoId === video)\n        this.setState({selectedVideo:newVideo})\n    }\n\n    render() {\n    return(\n    <div>\n    <SearchBar onSearch={(event, searchTerm) => this.onSearch(event, searchTerm)}/>\n    <div className=\"row\">\n    <VideoDetail video={this.state.selectedVideo}/>\n    <VideoList \n        selectedVideo={(selectedVideo) => this.selectedVideo(selectedVideo)}\n        videos = {this.state.videos}\n    />\n    </div>\n    </div>\n    )\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}